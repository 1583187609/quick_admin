{"version":3,"file":"echarts-liquidfill-59a83793.js","sources":["../../../node_modules/echarts-liquidfill/src/liquidFillSeries.js","../../../node_modules/echarts-liquidfill/src/liquidFillShape.js","../../../node_modules/echarts-liquidfill/src/liquidFillView.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\n\necharts.extendSeriesModel({\n\n    type: 'series.liquidFill',\n\n    optionUpdated: function () {\n        var option = this.option;\n        option.gridSize = Math.max(Math.floor(option.gridSize), 4);\n    },\n\n    getInitialData: function (option, ecModel) {\n        var dimensions = echarts.helper.createDimensions(option.data, {\n            coordDimensions: ['value']\n        });\n        var list = new echarts.List(dimensions, this);\n        list.initData(option.data);\n        return list;\n    },\n\n    defaultOption: {\n        color: ['#294D99', '#156ACF', '#1598ED', '#45BDFF'],\n        center: ['50%', '50%'],\n        radius: '50%',\n        amplitude: '8%',\n        waveLength: '80%',\n        phase: 'auto',\n        period: 'auto',\n        direction: 'right',\n        shape: 'circle',\n\n        waveAnimation: true,\n        animationEasing: 'linear',\n        animationEasingUpdate: 'linear',\n        animationDuration: 2000,\n        animationDurationUpdate: 1000,\n\n        outline: {\n            show: true,\n            borderDistance: 8,\n            itemStyle: {\n                color: 'none',\n                borderColor: '#294D99',\n                borderWidth: 8,\n                shadowBlur: 20,\n                shadowColor: 'rgba(0, 0, 0, 0.25)'\n            }\n        },\n\n        backgroundStyle: {\n            color: '#E3F7FF'\n        },\n\n        itemStyle: {\n            opacity: 0.95,\n            shadowBlur: 50,\n            shadowColor: 'rgba(0, 0, 0, 0.4)'\n        },\n\n        label: {\n            show: true,\n            color: '#294D99',\n            insideColor: '#fff',\n            fontSize: 50,\n            fontWeight: 'bold',\n\n            align: 'center',\n            baseline: 'middle',\n            position: 'inside'\n        },\n\n        emphasis: {\n            itemStyle: {\n                opacity: 0.8\n            }\n        }\n    }\n});\n","import * as echarts from 'echarts/lib/echarts';\n\nexport default echarts.graphic.extendShape({\n    type: 'ec-liquid-fill',\n\n    shape: {\n        waveLength: 0,\n        radius: 0,\n        radiusY: 0,\n        cx: 0,\n        cy: 0,\n        waterLevel: 0,\n        amplitude: 0,\n        phase: 0,\n        inverse: false\n    },\n\n    buildPath: function (ctx, shape) {\n        if (shape.radiusY == null) {\n            shape.radiusY = shape.radius;\n        }\n\n        /**\n         * We define a sine wave having 4 waves, and make sure at least 8 curves\n         * is drawn. Otherwise, it may cause blank area for some waves when\n         * wave length is large enough.\n         */\n        var curves = Math.max(\n            Math.ceil(2 * shape.radius / shape.waveLength * 4) * 2,\n            8\n        );\n\n        // map phase to [-Math.PI * 2, 0]\n        while (shape.phase < -Math.PI * 2) {\n            shape.phase += Math.PI * 2;\n        }\n        while (shape.phase > 0) {\n            shape.phase -= Math.PI * 2;\n        }\n        var phase = shape.phase / Math.PI / 2 * shape.waveLength;\n\n        var left = shape.cx - shape.radius + phase - shape.radius * 2;\n\n        /**\n         * top-left corner as start point\n         *\n         * draws this point\n         *  |\n         * \\|/\n         *  ~~~~~~~~\n         *  |      |\n         *  +------+\n         */\n        ctx.moveTo(left, shape.waterLevel);\n\n        /**\n         * top wave\n         *\n         * ~~~~~~~~ <- draws this sine wave\n         * |      |\n         * +------+\n         */\n        var waveRight = 0;\n        for (var c = 0; c < curves; ++c) {\n            var stage = c % 4;\n            var pos = getWaterPositions(c * shape.waveLength / 4, stage,\n                shape.waveLength, shape.amplitude);\n            ctx.bezierCurveTo(pos[0][0] + left, -pos[0][1] + shape.waterLevel,\n                pos[1][0] + left, -pos[1][1] + shape.waterLevel,\n                pos[2][0] + left, -pos[2][1] + shape.waterLevel);\n\n            if (c === curves - 1) {\n                waveRight = pos[2][0];\n            }\n        }\n\n        if (shape.inverse) {\n            /**\n             * top-right corner\n             *                  2. draws this line\n             *                          |\n             *                       +------+\n             * 3. draws this line -> |      | <- 1. draws this line\n             *                       ~~~~~~~~\n             */\n            ctx.lineTo(waveRight + left, shape.cy - shape.radiusY);\n            ctx.lineTo(left, shape.cy - shape.radiusY);\n            ctx.lineTo(left, shape.waterLevel);\n        }\n        else {\n            /**\n             * top-right corner\n             *\n             *                       ~~~~~~~~\n             * 3. draws this line -> |      | <- 1. draws this line\n             *                       +------+\n             *                          ^\n             *                          |\n             *                  2. draws this line\n             */\n            ctx.lineTo(waveRight + left, shape.cy + shape.radiusY);\n            ctx.lineTo(left, shape.cy + shape.radiusY);\n            ctx.lineTo(left, shape.waterLevel);\n        }\n\n        ctx.closePath();\n    }\n});\n\n\n\n/**\n * Using Bezier curves to fit sine wave.\n * There is 4 control points for each curve of wave,\n * which is at 1/4 wave length of the sine wave.\n *\n * The control points for a wave from (a) to (d) are a-b-c-d:\n *          c *----* d\n *     b *\n *       |\n * ... a * ..................\n *\n * whose positions are a: (0, 0), b: (0.5, 0.5), c: (1, 1), d: (PI / 2, 1)\n *\n * @param {number} x          x position of the left-most point (a)\n * @param {number} stage      0-3, stating which part of the wave it is\n * @param {number} waveLength wave length of the sine wave\n * @param {number} amplitude  wave amplitude\n */\nfunction getWaterPositions(x, stage, waveLength, amplitude) {\n    if (stage === 0) {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2, amplitude / 2],\n            [x + 1 / 2 * waveLength / Math.PI,     amplitude],\n            [x + waveLength / 4,                   amplitude]\n        ];\n    }\n    else if (stage === 1) {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2),\n            amplitude],\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1),\n            amplitude / 2],\n            [x + waveLength / 4,                   0]\n        ]\n    }\n    else if (stage === 2) {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2, -amplitude / 2],\n            [x + 1 / 2 * waveLength / Math.PI,     -amplitude],\n            [x + waveLength / 4,                   -amplitude]\n        ]\n    }\n    else {\n        return [\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2),\n            -amplitude],\n            [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1),\n            -amplitude / 2],\n            [x + waveLength / 4,                   0]\n        ]\n    }\n}\n","import * as echarts from 'echarts/lib/echarts';\nimport * as numberUtil from 'echarts/lib/util/number';\nimport LiquidShape from './liquidFillShape';\n\nvar parsePercent = numberUtil.parsePercent;\n\nfunction isPathSymbol(symbol) {\n    return symbol && symbol.indexOf('path://') === 0\n}\n\necharts.extendChartView({\n\n    type: 'liquidFill',\n\n    render: function (seriesModel, ecModel, api) {\n        var self = this;\n        var group = this.group;\n        group.removeAll();\n\n        var data = seriesModel.getData();\n\n        var itemModel = data.getItemModel(0);\n\n        var center = itemModel.get('center');\n        var radius = itemModel.get('radius');\n\n        var width = api.getWidth();\n        var height = api.getHeight();\n        var size = Math.min(width, height);\n        // itemStyle\n        var outlineDistance = 0;\n        var outlineBorderWidth = 0;\n        var showOutline = seriesModel.get('outline.show');\n\n        if (showOutline) {\n            outlineDistance = seriesModel.get('outline.borderDistance');\n            outlineBorderWidth = parsePercent(\n                seriesModel.get('outline.itemStyle.borderWidth'), size\n            );\n        }\n\n        var cx = parsePercent(center[0], width);\n        var cy = parsePercent(center[1], height);\n\n        var outterRadius;\n        var innerRadius;\n        var paddingRadius;\n\n        var isFillContainer = false;\n\n        var symbol = seriesModel.get('shape');\n        if (symbol === 'container') {\n            // a shape that fully fills the container\n            isFillContainer = true;\n\n            outterRadius = [\n                width / 2,\n                height / 2\n            ];\n            innerRadius = [\n                outterRadius[0] - outlineBorderWidth / 2,\n                outterRadius[1] - outlineBorderWidth / 2\n            ];\n            paddingRadius = [\n                parsePercent(outlineDistance, width),\n                parsePercent(outlineDistance, height)\n            ];\n\n            radius = [\n                Math.max(innerRadius[0] - paddingRadius[0], 0),\n                Math.max(innerRadius[1] - paddingRadius[1], 0)\n            ];\n        }\n        else {\n            outterRadius = parsePercent(radius, size) / 2;\n            innerRadius = outterRadius - outlineBorderWidth / 2;\n            paddingRadius = parsePercent(outlineDistance, size);\n\n            radius = Math.max(innerRadius - paddingRadius, 0);\n        }\n\n        if (showOutline) {\n            var outline = getOutline();\n            outline.style.lineWidth = outlineBorderWidth;\n            group.add(getOutline());\n        }\n\n        var left = isFillContainer ? 0 : cx - radius;\n        var top = isFillContainer ? 0 : cy - radius;\n\n        var wavePath = null;\n\n        group.add(getBackground());\n\n        // each data item for a wave\n        var oldData = this._data;\n        var waves = [];\n        data.diff(oldData)\n            .add(function (idx) {\n                var wave = getWave(idx, false);\n\n                var waterLevel = wave.shape.waterLevel;\n                wave.shape.waterLevel = isFillContainer ? height / 2 : radius;\n                echarts.graphic.initProps(wave, {\n                    shape: {\n                        waterLevel: waterLevel\n                    }\n                }, seriesModel);\n\n                wave.z2 = 2;\n                setWaveAnimation(idx, wave, null);\n\n                group.add(wave);\n                data.setItemGraphicEl(idx, wave);\n                waves.push(wave);\n            })\n            .update(function (newIdx, oldIdx) {\n                var waveElement = oldData.getItemGraphicEl(oldIdx);\n\n                // new wave is used to calculate position, but not added\n                var newWave = getWave(newIdx, false, waveElement);\n\n                // changes with animation\n                var shape = {};\n                var shapeAttrs = ['amplitude', 'cx', 'cy', 'phase', 'radius', 'radiusY', 'waterLevel', 'waveLength'];\n                for (var i = 0; i < shapeAttrs.length; ++i) {\n                    var attr = shapeAttrs[i];\n                    if (newWave.shape.hasOwnProperty(attr)) {\n                        shape[attr] = newWave.shape[attr];\n                    }\n                }\n\n                var style = {};\n                var styleAttrs = ['fill', 'opacity', 'shadowBlur', 'shadowColor'];\n                for (var i = 0; i < styleAttrs.length; ++i) {\n                    var attr = styleAttrs[i];\n                    if (newWave.style.hasOwnProperty(attr)) {\n                        style[attr] = newWave.style[attr];\n                    }\n                }\n\n                if (isFillContainer) {\n                    shape.radiusY = height / 2;\n                }\n\n                // changes with animation\n                echarts.graphic.updateProps(waveElement, {\n                    shape: shape,\n                    x: newWave.x,\n                    y: newWave.y\n                }, seriesModel);\n\n                if (seriesModel.isUniversalTransitionEnabled && seriesModel.isUniversalTransitionEnabled()) {\n                    echarts.graphic.updateProps(waveElement, {\n                        style: style\n                    }, seriesModel);\n                }\n                else {\n                    waveElement.useStyle(style);\n                }\n\n                // instant changes\n                var oldWaveClipPath = waveElement.getClipPath();\n                var newWaveClipPath = newWave.getClipPath();\n\n                waveElement.setClipPath(newWave.getClipPath());\n                waveElement.shape.inverse = newWave.inverse;\n\n                if (oldWaveClipPath && newWaveClipPath\n                    && self._shape === symbol\n                    // TODO use zrender morphing to apply complex symbol animation.\n                    && !isPathSymbol(symbol)\n                ) {\n                    // Can be animated.\n                    echarts.graphic.updateProps(newWaveClipPath, {\n                        shape: oldWaveClipPath.shape\n                    }, seriesModel, { isFrom: true });\n                }\n\n                setWaveAnimation(newIdx, waveElement, waveElement);\n                group.add(waveElement);\n                data.setItemGraphicEl(newIdx, waveElement);\n                waves.push(waveElement);\n            })\n            .remove(function (idx) {\n                var wave = oldData.getItemGraphicEl(idx);\n                group.remove(wave);\n            })\n            .execute();\n\n        if (itemModel.get('label.show')) {\n            group.add(getText(waves));\n        }\n\n        this._shape = symbol;\n        this._data = data;\n\n        /**\n         * Get path for outline, background and clipping\n         *\n         * @param {number} r outter radius of shape\n         * @param {boolean|undefined} isForClipping if the shape is used\n         *                                          for clipping\n         */\n        function getPath(r, isForClipping) {\n            if (symbol) {\n                // customed symbol path\n                if (isPathSymbol(symbol)) {\n                    var path = echarts.graphic.makePath(symbol.slice(7), {});\n                    var bouding = path.getBoundingRect();\n                    var w = bouding.width;\n                    var h = bouding.height;\n                    if (w > h) {\n                        h = r * 2 / w * h;\n                        w = r * 2;\n                    }\n                    else {\n                        w = r * 2 / h * w;\n                        h = r * 2;\n                    }\n\n                    var left = isForClipping ? 0 : cx - w / 2;\n                    var top = isForClipping ? 0 : cy - h / 2;\n                    path = echarts.graphic.makePath(\n                        symbol.slice(7),\n                        {},\n                        new echarts.graphic.BoundingRect(left, top, w, h)\n                    );\n                    if (isForClipping) {\n                        path.x = -w / 2;\n                        path.y = -h / 2;\n                    }\n                    return path;\n                }\n                else if (isFillContainer) {\n                    // fully fill the container\n                    var x = isForClipping ? -r[0] : cx - r[0];\n                    var y = isForClipping ? -r[1] : cy - r[1];\n                    return echarts.helper.createSymbol(\n                        'rect', x, y, r[0] * 2, r[1] * 2\n                    );\n                }\n                else {\n                    var x = isForClipping ? -r : cx - r;\n                    var y = isForClipping ? -r : cy - r;\n                    if (symbol === 'pin') {\n                        y += r;\n                    }\n                    else if (symbol === 'arrow') {\n                        y -= r;\n                    }\n                    return echarts.helper.createSymbol(symbol, x, y, r * 2, r * 2);\n                }\n            }\n\n            return new echarts.graphic.Circle({\n                shape: {\n                    cx: isForClipping ? 0 : cx,\n                    cy: isForClipping ? 0 : cy,\n                    r: r\n                }\n            });\n        }\n        /**\n         * Create outline\n         */\n        function getOutline() {\n            var outlinePath = getPath(outterRadius);\n            outlinePath.style.fill = null;\n\n            outlinePath.setStyle(seriesModel.getModel('outline.itemStyle')\n                .getItemStyle());\n\n            return outlinePath;\n        }\n\n        /**\n         * Create background\n         */\n        function getBackground() {\n            // Seperate stroke and fill, so we can use stroke to cover the alias of clipping.\n            var strokePath = getPath(radius);\n            strokePath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            strokePath.style.fill = null;\n\n            // Stroke is front of wave\n            strokePath.z2 = 5;\n\n            var fillPath = getPath(radius);\n            fillPath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            fillPath.style.stroke = null;\n\n            var group = new echarts.graphic.Group();\n            group.add(strokePath);\n            group.add(fillPath);\n\n            return group;\n        }\n\n        /**\n         * wave shape\n         */\n        function getWave(idx, isInverse, oldWave) {\n            var radiusX = isFillContainer ? radius[0] : radius;\n            var radiusY = isFillContainer ? height / 2 : radius;\n\n            var itemModel = data.getItemModel(idx);\n            var itemStyleModel = itemModel.getModel('itemStyle');\n            var phase = itemModel.get('phase');\n            var amplitude = parsePercent(itemModel.get('amplitude'),\n                radiusY * 2);\n            var waveLength = parsePercent(itemModel.get('waveLength'),\n                radiusX * 2);\n\n            var value = data.get('value', idx);\n            var waterLevel = radiusY - value * radiusY * 2;\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n            var normalStyle = itemStyleModel.getItemStyle();\n            if (!normalStyle.fill) {\n                var seriesColor = seriesModel.get('color');\n                var id = idx % seriesColor.length;\n                normalStyle.fill = seriesColor[id];\n            }\n\n            var x = radiusX * 2;\n            var wave = new LiquidShape({\n                shape: {\n                    waveLength: waveLength,\n                    radius: radiusX,\n                    radiusY: radiusY,\n                    cx: x,\n                    cy: 0,\n                    waterLevel: waterLevel,\n                    amplitude: amplitude,\n                    phase: phase,\n                    inverse: isInverse\n                },\n                style: normalStyle,\n                x: cx,\n                y: cy,\n            });\n            wave.shape._waterLevel = waterLevel;\n\n            var hoverStyle = itemModel.getModel('emphasis.itemStyle')\n                .getItemStyle();\n            hoverStyle.lineWidth = 0;\n\n            wave.ensureState('emphasis').style = hoverStyle;\n            echarts.helper.enableHoverEmphasis(wave);\n\n            // clip out the part outside the circle\n            var clip = getPath(radius, true);\n            // set fill for clipPath, otherwise it will not trigger hover event\n            clip.setStyle({\n                fill: 'white'\n            });\n            wave.setClipPath(clip);\n\n            return wave;\n        }\n\n        function setWaveAnimation(idx, wave, oldWave) {\n            var itemModel = data.getItemModel(idx);\n\n            var maxSpeed = itemModel.get('period');\n            var direction = itemModel.get('direction');\n\n            var value = data.get('value', idx);\n\n            var phase = itemModel.get('phase');\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n\n            var defaultSpeed = function (maxSpeed) {\n                var cnt = data.count();\n                return cnt === 0 ? maxSpeed : maxSpeed *\n                    (0.2 + (cnt - idx) / cnt * 0.8);\n            };\n            var speed = 0;\n            if (maxSpeed === 'auto') {\n                speed = defaultSpeed(5000);\n            }\n            else {\n                speed = typeof maxSpeed === 'function'\n                    ? maxSpeed(value, idx) : maxSpeed;\n            }\n\n            // phase for moving left/right\n            var phaseOffset = 0;\n            if (direction === 'right' || direction == null) {\n                phaseOffset = Math.PI;\n            }\n            else if (direction === 'left') {\n                phaseOffset = -Math.PI;\n            }\n            else if (direction === 'none') {\n                phaseOffset = 0;\n            }\n            else {\n                console.error('Illegal direction value for liquid fill.');\n            }\n\n            // wave animation of moving left/right\n            if (direction !== 'none' && itemModel.get('waveAnimation')) {\n                wave\n                    .animate('shape', true)\n                    .when(0, {\n                        phase: phase\n                    })\n                    .when(speed / 2, {\n                        phase: phaseOffset + phase\n                    })\n                    .when(speed, {\n                        phase: phaseOffset * 2 + phase\n                    })\n                    .during(function () {\n                        if (wavePath) {\n                            wavePath.dirty(true);\n                        }\n                    })\n                    .start();\n            }\n        }\n\n        /**\n         * text on wave\n         */\n        function getText(waves) {\n            var labelModel = itemModel.getModel('label');\n\n            function formatLabel() {\n                var formatted = seriesModel.getFormattedLabel(0, 'normal');\n                var defaultVal = (data.get('value', 0) * 100);\n                var defaultLabel = data.getName(0) || seriesModel.name;\n                if (!isNaN(defaultVal)) {\n                    defaultLabel = defaultVal.toFixed(0) + '%';\n                }\n                return formatted == null ? defaultLabel : formatted;\n            }\n\n            var textRectOption = {\n                z2: 10,\n                shape: {\n                    x: left,\n                    y: top,\n                    width: (isFillContainer ? radius[0] : radius) * 2,\n                    height: (isFillContainer ? radius[1] : radius) * 2\n                },\n                style: {\n                    fill: 'transparent'\n                },\n                textConfig: {\n                    position: labelModel.get('position') || 'inside'\n                },\n                silent: true\n            };\n            var textOption = {\n                style: {\n                    text: formatLabel(),\n                    textAlign: labelModel.get('align'),\n                    textVerticalAlign: labelModel.get('baseline')\n                }\n            };\n            Object.assign(textOption.style, echarts.helper.createTextStyle(labelModel));\n\n            var outsideTextRect = new echarts.graphic.Rect(textRectOption);\n            var insideTextRect = new echarts.graphic.Rect(textRectOption);\n            insideTextRect.disableLabelAnimation = true;\n            outsideTextRect.disableLabelAnimation = true;\n\n            var outsideText = new echarts.graphic.Text(textOption);\n            var insideText = new echarts.graphic.Text(textOption);\n            outsideTextRect.setTextContent(outsideText);\n\n            insideTextRect.setTextContent(insideText);\n            var insColor = labelModel.get('insideColor');\n            insideText.style.fill = insColor;\n\n            var group = new echarts.graphic.Group();\n            group.add(outsideTextRect);\n            group.add(insideTextRect);\n\n            // clip out waves for insideText\n            var boundingCircle = getPath(radius, true);\n\n            wavePath = new echarts.graphic.CompoundPath({\n                shape: {\n                    paths: waves\n                },\n                x: cx,\n                y: cy\n            });\n\n            wavePath.setClipPath(boundingCircle);\n            insideTextRect.setClipPath(wavePath);\n\n            return group;\n        }\n    },\n\n    dispose: function () {\n        // dispose nothing here\n    }\n});\n"],"names":["echarts.extendSeriesModel","type","optionUpdated","option","this","gridSize","Math","max","floor","getInitialData","ecModel","dimensions","echarts.helper.createDimensions","data","coordDimensions","list","echarts.List","initData","defaultOption","color","center","radius","amplitude","waveLength","phase","period","direction","shape","waveAnimation","animationEasing","animationEasingUpdate","animationDuration","animationDurationUpdate","outline","show","borderDistance","itemStyle","borderColor","borderWidth","shadowBlur","shadowColor","backgroundStyle","opacity","label","insideColor","fontSize","fontWeight","align","baseline","position","emphasis","LiquidShape","echarts.graphic.extendShape","radiusY","cx","cy","waterLevel","inverse","buildPath","ctx","curves","ceil","PI","left","moveTo","waveRight","c","stage","pos","getWaterPositions","bezierCurveTo","lineTo","closePath","x","parsePercent","numberUtil.parsePercent","isPathSymbol","symbol","indexOf","echarts.extendChartView","render","seriesModel","api","self","group","removeAll","getData","itemModel","getItemModel","get","width","getWidth","height","getHeight","size","min","outlineDistance","outlineBorderWidth","showOutline","outterRadius","innerRadius","paddingRadius","isFillContainer","getOutline","style","lineWidth","add","top","wavePath","strokePath","getPath","setStyle","getModel","getItemStyle","fill","z2","fillPath","stroke","echarts.graphic.Group","getBackground","oldData","_data","waves","r","isForClipping","path","echarts.graphic.makePath","slice","bouding","getBoundingRect","w","h","echarts.graphic.BoundingRect","y","echarts.helper.createSymbol","echarts.graphic.Circle","outlinePath","getWave","idx","isInverse","oldWave","radiusX","itemStyleModel","normalStyle","seriesColor","id","length","wave","_waterLevel","hoverStyle","ensureState","echarts.helper.enableHoverEmphasis","clip","setClipPath","setWaveAnimation","maxSpeed","value","cnt","speed","count","phaseOffset","animate","when","during","dirty","start","diff","echarts.graphic.initProps","setItemGraphicEl","push","update","newIdx","oldIdx","waveElement","getItemGraphicEl","newWave","shapeAttrs","i","attr","hasOwnProperty","styleAttrs","echarts.graphic.updateProps","isUniversalTransitionEnabled","useStyle","oldWaveClipPath","getClipPath","newWaveClipPath","_shape","isFrom","remove","execute","labelModel","formatLabel","formatted","getFormattedLabel","defaultVal","defaultLabel","getName","name","isNaN","toFixed","textRectOption","textConfig","silent","textOption","text","textAlign","textVerticalAlign","Object","assign","echarts.helper.createTextStyle","outsideTextRect","echarts.graphic.Rect","insideTextRect","disableLabelAnimation","outsideText","echarts.graphic.Text","insideText","setTextContent","insColor","boundingCircle","echarts.graphic.CompoundPath","paths","getText","dispose"],"mappings":"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","x_google_ignoreList":[0,1,2]}
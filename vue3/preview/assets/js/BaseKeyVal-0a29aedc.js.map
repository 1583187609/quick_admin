{"version":3,"file":"BaseKeyVal-0a29aedc.js","sources":["../../../src/components/BaseKeyVal.vue"],"sourcesContent":["<template>\r\n  <div class=\"base-key-val f-fs-s\" :class=\"[vertical ? 'f-c-c-c' : 'f-fs-fs']\">\r\n    <div\r\n      class=\"key f-0 f-fs-fs\"\r\n      :class=\"{ colon }\"\r\n      :style=\"{\r\n        width: toCssVal(labelWidth),\r\n      }\"\r\n    >\r\n      <BaseIcon class=\"mr-4\" :name=\"icon\" v-if=\"icon\" />\r\n      <span class=\"f-1\">{{ label }}</span>\r\n      <el-popover v-bind=\"getPopoverAttrs(popover)\" v-if=\"popover\">\r\n        <template #reference>\r\n          <BaseIcon class=\"m-2 tips-icon\" name=\"QuestionFilled\" />\r\n        </template>\r\n      </el-popover>\r\n    </div>\r\n    <div\r\n      class=\"val f-1 f-fs-fs-w\"\r\n      :class=\"{\r\n        [`line-${props.line}`]: !!props.line,\r\n        [`${props.valClass}`]: !!props.valClass,\r\n      }\"\r\n    >\r\n      <slot>{{ emptyVals.includes(valText as any) ? \"-\" : valText }}</slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script lang=\"ts\" setup>\r\nimport { toCssVal, typeOf, getPopoverAttrs, emptyVals } from \"@/components/_utils\";\r\nimport { CommonObj, StrNum } from \"@/vite-env\";\r\nimport { ref, reactive, computed } from \"vue\";\r\nimport { PopoverAttrs } from \"@/components/BaseFormItem\";\nimport { defineOptions } from 'vue'; \ndefineOptions({ name: \"BaseKeyVal\" }); \n\r\n// import * as allOpts from \"@/services/options\";\r\nconst props = withDefaults(\r\n  defineProps<{\r\n    icon?: string;\r\n    colon?: boolean;\r\n    label?: string;\r\n    value?: StrNum | StrNum[];\r\n    line?: number;\r\n    labelWidth?: string;\r\n    valClass?: string;\r\n    optsName?: string;\r\n    popover?: string | PopoverAttrs;\r\n    joinChar?: string;\r\n    vertical?: boolean;\r\n  }>(),\r\n  {\r\n    colon: true,\r\n    line: 0,\r\n    joinChar: \"，\",\r\n  }\r\n);\r\nconst valText = computed(() => {\r\n  const { value, joinChar, optsName } = props;\r\n  // if (optsName) {\r\n  //   const currOpts: CommonObj = allOpts[optsName + \"Opts\"];\r\n  //   return currOpts?.find((it: OptionItem) => it.value == props.value)?.label;\r\n  // } else {\r\n  if (typeOf(value) === \"Array\") return (value as StrNum[]).join(joinChar);\r\n  return value;\r\n  // }\r\n});\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.base-key-val {\r\n  line-height: 24px;\r\n  .key {\r\n    text-align: right;\r\n    &.colon::after {\r\n      content: \"：\";\r\n    }\r\n    .tips-icon {\r\n      margin-top: 5px;\r\n    }\r\n  }\r\n  &.f-c-c-c {\r\n    .key {\r\n      text-align: center;\r\n      width: 100% !important;\r\n    }\r\n  }\r\n  .val {\r\n    align-content: flex-start;\r\n  }\r\n}\r\n</style>\r\n"],"names":["props","__props","valText","computed","value","joinChar","optsName","typeOf","join"],"mappings":"ktDAqCA,MAAMA,EAAQC,EAoBRC,EAAUC,GAAS,KACvB,MAAMC,MAAEA,EAAAC,SAAOA,EAAUC,SAAAA,GAAaN,EAKlC,MAAkB,UAAlBO,EAAOH,GAA4BA,EAAmBI,KAAKH,GACxDD,CAAA"}
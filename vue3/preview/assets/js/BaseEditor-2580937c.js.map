{"version":3,"file":"BaseEditor-2580937c.js","sources":["../../../src/components/BaseEditor.vue"],"sourcesContent":["<template>\r\n  <div class=\"base-editor\">\r\n    <Toolbar class=\"tool-bar\" :editor=\"editorInst\" :defaultConfig=\"toolbarCfg\" :mode=\"mode\" />\r\n    <Editor\r\n      class=\"editor\"\r\n      :style=\"{ height: toCssVal(height), width: '100%' }\"\r\n      :defaultConfig=\"editorCfg\"\r\n      v-model=\"value\"\r\n      :mode=\"mode\"\r\n      @onMaxLength=\"onMaxLength\"\r\n      @onChange=\"onChange\"\r\n      @onFocus=\"onFocus\"\r\n      @onBlur=\"onBlur\"\r\n      @onCreated=\"handleCreated\"\r\n    />\r\n  </div>\r\n</template>\r\n<script lang=\"ts\" setup>\r\n// 官方文档地址：https://www.wangeditor.com/v5/getting-started.html\r\nimport { onBeforeUnmount, computed, onMounted } from \"vue\";\r\nimport { Editor, Toolbar } from \"@wangeditor/editor-for-vue\";\r\nimport { IToolbarConfig, IDomEditor } from \"@wangeditor/editor\";\r\nimport { pickBy } from \"lodash\";\r\nimport { showMessage, toCssVal } from \"@/components/_utils\";\r\nimport { useFormItem } from \"element-plus\";\r\nimport { merge } from \"lodash\";\r\nimport { CommonObj, StrNum } from \"@/vite-env\";\r\nimport \"@wangeditor/editor/dist/css/style.css\";\r\nimport { isProd, storage } from \"@/components/_utils\";\nimport { defineOptions } from 'vue'; \ndefineOptions({ name: \"BaseEditor\" }); \n\r\n\r\nexport type ModeTypes = \"default\" | \"simple\";\r\nconst { formItem } = useFormItem();\r\nconst defaultToolBarCfg = {\r\n  // toolbarKeys: [\r\n  //     // 菜单 key\r\n  //     \"headerSelect\",\r\n  //     // 分割线\r\n  //     \"|\",\r\n  //     // 菜单 key\r\n  //     \"bold\",\r\n  //     \"italic\",\r\n  //     // 菜单组，包含多个菜单\r\n  //     {\r\n  //       key: \"group-more-style\", // 必填，要以 group 开头\r\n  //       title: \"更多样式\", // 必填\r\n  //       iconSvg: \"<svg>....</svg>\", // 可选\r\n  //       menuKeys: [\"through\", \"code\", \"clearStyle\"], // 下级菜单 key ，必填\r\n  //     },\r\n  //   ],\r\n  //插入新的自定义扩展的菜单\r\n  //   insertKeys: {\r\n  //     index: 5, // 插入的位置，基于当前的 toolbarKeys\r\n  //     keys: [\"menu-key1\", \"menu-key2\"],\r\n  //   },\r\n  // 排除掉某些菜单，其他都保留\r\n  //   excludeKeys: [\r\n  //     \"headerSelect\",\r\n  //     \"italic\",\r\n  //     \"group-more-style\", // 排除菜单组，写菜单组 key 的值即可\r\n  // ],\r\n};\r\nconst defaultEditorCfg = {\r\n  placeholder: \"请输入内容...\",\r\n  //maxLength 应该由表单的规则（rules）来决定，例：rules: [{ max: 10, message: \"不能超过10个字符\", trigger: \"change\" }]\r\n  // maxLength: formItem.rules?.find((it) => !!it.max)?.max,\r\n  MENU_CONF: {\r\n    uploadImage: {\r\n      fieldName: \"file\",\r\n      server: `${isProd ? \"\" : \"/proxy\"}/api/admin/upload/image`,\r\n      headers: { \"X-Token\": storage.getItem(\"token\") },\r\n      maxFileSize: 1024 * 1024 * 10, //10M\r\n      // 自定义插入图片\r\n      customInsert(res: any, insertFn: any) {\r\n        // TS 语法\r\n        // res 即服务端的返回结果\r\n        // 从 res 中找到 url alt href ，然后插入图片\r\n        insertFn(res.data.fullUrl);\r\n      },\r\n    },\r\n  },\r\n  // readOnly: true,\r\n  // customAlert(s: string, t: any) {\r\n  //   showMessage(s, t);\r\n  //   switch (t) {\r\n  //     case \"success\":\r\n  //       showMessage(s, \"success\");\r\n  //       break;\r\n  //     case \"info\":\r\n  //       showMessage(s, \"info\");\r\n  //       break;\r\n  //     case \"warning\":\r\n  //       showMessage(s, \"warning\");\r\n  //       break;\r\n  //     case \"error\":\r\n  //       showMessage(s, \"error\");\r\n  //       break;\r\n  //     default:\r\n  //       showMessage(s, \"info\");\r\n  //       break;\r\n  //   }\r\n  // },\r\n};\r\nconst props = withDefaults(\r\n  defineProps<{\r\n    editor?: any;\r\n    modelValue?: string;\r\n    height?: StrNum;\r\n    placeholder?: string;\r\n    mode?: ModeTypes;\r\n    toolBarConfig?: CommonObj;\r\n    editorConfig?: CommonObj;\r\n  }>(),\r\n  {\r\n    height: 300,\r\n    mode: \"simple\",\r\n    toolBarConfig: () => ({}),\r\n    editorConfig: () => ({}),\r\n  }\r\n);\r\nconst emits = defineEmits([\"update:modelValue\", \"change\", \"focus\", \"blur\"]);\r\nlet editorInst: any = null; // editor 实例\r\nconst toolbarCfg: Partial<IToolbarConfig> = merge({}, defaultToolBarCfg, props.toolBarConfig);\r\nconst editorCfg = merge({}, defaultEditorCfg, props.editorConfig, {\r\n  placeholder: props.placeholder,\r\n  maxLength: formItem.rules?.find(it => !!it.max)?.max,\r\n});\r\n//编辑器中的文本内容\r\nconst value = computed({\r\n  get() {\r\n    return props.modelValue || \"\";\r\n  },\r\n  set(val: string) {\r\n    if (val === \"<p><br></p>\") {\r\n      val = \"\";\r\n    }\r\n    emits(\"update:modelValue\", val);\r\n  },\r\n});\r\nconst handleCreated = (editor: IDomEditor) => {\r\n  editorInst = editor; // 记录 editor 实例\r\n};\r\n//表单校验参照： http://www.xinyan666.fun/article/article_detail/171/\r\nfunction onMaxLength(editor: IDomEditor) {\r\n  // formItem?.validate(\"change\");\r\n  showMessage(`不能超过${editorCfg.maxLength}个字符`, \"warning\");\r\n}\r\n\r\nfunction getVal(val = editorInst.getText()) {\r\n  // const isEmpty = editorInst.isEmpty();\r\n  //isEmpty()方法只能识别只有一个空段落情况，其他情况（如有一个空标题、空表格）请使用 editor.getText() 来判断。\r\n  const isEmpty = val === \"\";\r\n  return isEmpty ? \"\" : editorInst.getHtml();\r\n}\r\n\r\nfunction onChange(editor: IDomEditor) {\r\n  emits(\"change\", getVal());\r\n  formItem?.validate(\"change\");\r\n}\r\n\r\nfunction onFocus(editor: IDomEditor) {\r\n  emits(\"focus\", getVal());\r\n  formItem?.validate(\"focus\");\r\n}\r\n\r\nfunction onBlur(editor: IDomEditor) {\r\n  emits(\"blur\", getVal());\r\n  formItem?.validate(\"blur\");\r\n}\r\n\r\nonMounted(() => {});\r\n// 组件销毁时，也及时销毁编辑器\r\nonBeforeUnmount(() => {\r\n  if (editorInst == null) return;\r\n  editorInst.destroy();\r\n});\r\ndefineExpose({\r\n  editor: editorInst,\r\n});\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.base-editor {\r\n  border-radius: $radius-main;\r\n  border: $border-main;\r\n  overflow: hidden;\r\n  width: 100%;\r\n}\r\n\r\n.tool-bar {\r\n  border-bottom: $border-main;\r\n}\r\n</style>\r\n"],"names":["formItem","useFormItem","defaultEditorCfg","placeholder","MENU_CONF","uploadImage","fieldName","server","headers","storage","getItem","maxFileSize","customInsert","res","insertFn","data","fullUrl","props","__props","emits","__emit","editorInst","toolbarCfg","merge","toolBarConfig","editorCfg","editorConfig","maxLength","_b","_a","rules","find","it","max","value","computed","get","modelValue","set","val","handleCreated","editor","onMaxLength","showMessage","getVal","getText","getHtml","onChange","validate","onFocus","onBlur","onMounted","onBeforeUnmount","destroy","__expose"],"mappings":"uxDAkCM,MAAAA,SAAEA,GAAaC,IA8BfC,EAAmB,CACvBC,YAAa,WAGbC,UAAW,CACTC,YAAa,CACXC,UAAW,OACXC,OAAQ,gCACRC,QAAS,CAAE,UAAWC,EAAQC,QAAQ,UACtCC,YAAa,SAEb,YAAAC,CAAaC,EAAUC,GAIZA,EAAAD,EAAIE,KAAKC,QACpB,KAyBAC,EAAQC,EAiBRC,EAAQC,EACd,IAAIC,EAAkB,KACtB,MAAMC,EAAsCC,EAAAA,MAAM,CAAA,EAzFxB,CAAA,EAyF+CN,EAAMO,eACzEC,EAAYF,EAAAA,MAAM,CAAA,EAAIrB,EAAkBe,EAAMS,aAAc,CAChEvB,YAAac,EAAMd,YACnBwB,UAAW,OAAAC,EAAA,OAASC,EAAA7B,EAAA8B,YAAO,EAAAD,EAAAE,WAAaC,EAAGC,YAAM,EAAAL,EAAAK,MAG7CC,EAAQC,EAAS,CACrBC,IAAM,IACGnB,EAAMoB,YAAc,GAE7B,GAAAC,CAAIC,GACU,gBAARA,IACIA,EAAA,IAERpB,EAAM,oBAAqBoB,EAC7B,IAEIC,EAAiBC,IACRpB,EAAAoB,CAAA,EAGf,SAASC,EAAYD,GAEnBE,EAAY,OAAOlB,EAAUE,eAAgB,UAC/C,CAEA,SAASiB,EAAOL,EAAMlB,EAAWwB,WAIxB,MADiB,KAARN,EACC,GAAKlB,EAAWyB,SACnC,CAEA,SAASC,EAASN,GACVtB,EAAA,SAAUyB,KAChB,MAAA5C,GAAAA,EAAUgD,SAAS,SACrB,CAEA,SAASC,EAAQR,GACTtB,EAAA,QAASyB,KACf,MAAA5C,GAAAA,EAAUgD,SAAS,QACrB,CAEA,SAASE,EAAOT,GACRtB,EAAA,OAAQyB,KACd,MAAA5C,GAAAA,EAAUgD,SAAS,OACrB,QAEAG,GAAU,SAEVC,GAAgB,KACI,MAAd/B,GACJA,EAAWgC,SAAQ,IAERC,EAAA,CACXb,OAAQpB"}
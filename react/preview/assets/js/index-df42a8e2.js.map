{"version":3,"file":"index-df42a8e2.js","sources":["../../../src/components/BaseEditor/_help.ts","../../../src/components/BaseEditor/index.tsx","../../../src/views/test/test-4/index.tsx"],"sourcesContent":["import { CommonObj } from \"@/vite-env\";\r\nimport { IDomEditor } from \"@wangeditor/editor\";\r\nimport { CSSProperties } from \"react\";\r\nimport { showMessage } from \"../_utils\";\r\n\r\ntype InsertFnType = (url: string, alt: string, href: string) => void;\r\n\r\n//将文件大小（单位：b）转成带有单位（kb或MB）的文件大小\r\nexport function toFileSizeStr(size: number | string) {\r\n  size = Number(size) / 1024;\r\n  if (size >= 1024) {\r\n    size = (size / 1024).toFixed(2) + \"MB\";\r\n  } else {\r\n    size = size.toFixed(2) + \"kb\";\r\n  }\r\n  return size;\r\n}\r\n//判断编辑器内容是否为空\r\nexport function getIsEmpty(editor: IDomEditor) {\r\n  // editor.isEmpty()只能识别只有一个空段落情况，其他情况（如有一个空标题、空表格）需要使用 editor.getText() 来判断。\r\n  return editor.isEmpty() || editor.getText() === \"\";\r\n}\r\n\r\n/**\r\n * 获取上传文件的配置\r\n * @param maxSize\r\n */\r\nexport function getUploadImageConfig(maxSize = 5 * 1024 * 1024) {\r\n  return {\r\n    // server: YUANXIN_API_URL + `/file/upload?time=${Date.now()}`,\r\n    fieldName: \"file\",\r\n    allowedFileTypes: [\"image/*\"],\r\n    maxFileSize: maxSize, //默认5M\r\n    // maxNumberOfFiles: 1,// 最多可上传几个文件\r\n    // timeout: 5 * 1000, // 超时时间，默认10秒\r\n    // 自定义上传参数，例如传递验证的 token 等。参数会被添加到 formData 中，一起上传到服务端。\r\n    meta: {\r\n      path: \"/ums-admin/editor-image\",\r\n    },\r\n    withCredentials: true,\r\n    // 自定义插入图片\r\n    customInsert(res: { data: { url: string }; code: number; msg: string }, insertFn: InsertFnType) {\r\n      if (!res) {\r\n        showMessage(\"系统异常\", \"error\");\r\n        return;\r\n      }\r\n      const { data, code, msg = \"上传失败\" } = res;\r\n      if (code !== 200) {\r\n        showMessage(msg, \"error\");\r\n        return;\r\n      }\r\n      insertFn(data?.url, \"\", \"\");\r\n    },\r\n    //图片上传失败\r\n    onError(file: CommonObj) {\r\n      const { size } = file;\r\n      if (size > maxSize) {\r\n        showMessage(`图片大小不能超过${toFileSizeStr(maxSize)}`, \"warning\");\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * 将纯文本字符串转换为带错别字，敏感词标识的html字符串\r\n * @param str\r\n * @param wrongWords string[] 错别字数组\r\n * @param sensWords string[]  敏感词数组\r\n * @param wrongStyle string 错别字样式\r\n * @param sensStyle string  敏感词样式\r\n * @example textToHtmlWithWords(\"我们的假象，在希望的田野上，热爱我们的祖国！\",['假象'],['我', '的'])\r\n */\r\nexport function textToHtmlWithWords(\r\n  str = \"\",\r\n  wrongWords: string[] = [],\r\n  sensWords: string[] = [],\r\n  wrongStyle = \"color: red;\",\r\n  sensStyle = \"color: darkorange;\"\r\n) {\r\n  // wrongGroups=['假象->家乡']\r\n  // const wrongWords = wrongGroups.map(it=>it.split(\"->\")[0])\r\n  const reg = new RegExp(`(${wrongWords.join(\"|\")})|(${sensWords.join(\"|\")})`, \"gi\");\r\n  if (str) {\r\n    return str.replace(reg, (matchStr: string, chars: string, index: number) => {\r\n      const isWrong = wrongWords.includes(matchStr);\r\n      return `<span style=\"${isWrong ? wrongStyle : sensStyle}\">${matchStr}</span>`;\r\n    });\r\n  }\r\n  return \"\";\r\n}\r\n\r\n/**\r\n * 将html字符串转为文本字符串\r\n * @param htmlStr string html字符串\r\n */\r\nexport function htmlToText(htmlStr = \"\") {\r\n  const el = document.createElement(\"div\");\r\n  el.innerHTML = htmlStr;\r\n  return el.innerText;\r\n}\r\n\r\n/**\r\n * 将CSSProperties转成行内css样式字符串\r\n * @param cssProps CSSProperties react的css样式\r\n */\r\nexport function cssObjToCssStr(cssProps: CSSProperties = {}) {\r\n  let str = \"\";\r\n  const ents = Object.entries(cssProps);\r\n  str = ents\r\n    .map(([key, val], ind) => {\r\n      key = key.replace(/([A-Z])/g, \"-$1\").toLowerCase();\r\n      return `${key}:${val};`;\r\n    })\r\n    .join(\"\");\r\n  return str;\r\n}\r\n","/**\r\n * 富文本编辑器\r\n * @description 关键功能点：敏感词、错别字标红；插入自定义菜单；\r\n * @notice 处理了标红文本撤销时出现的第三方bug\r\n * @notice 处理了当失去或聚焦焦点时，会触发onChange事件的第三方bug\r\n */\r\n\r\nimport React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  CSSProperties,\r\n  useRef,\r\n  useCallback,\r\n} from \"react\";\r\nimport { debounce, merge } from \"lodash\";\r\nimport { IDomEditor, IToolbarConfig, IEditorConfig } from \"@wangeditor/editor\";\r\nimport { Editor, Toolbar } from \"@wangeditor/editor-for-react\";\r\nimport {\r\n  toFileSizeStr,\r\n  getIsEmpty,\r\n  getUploadImageConfig,\r\n  textToHtmlWithWords,\r\n  htmlToText,\r\n  cssObjToCssStr,\r\n} from \"./_help\";\r\nimport { useEventListener } from \"@/hooks\";\r\n\r\nimport \"@wangeditor/editor/dist/css/style.css\"; // 引入 css\r\nimport s from \"./index.module.less\";\r\n\r\ninterface Props {\r\n  className?: string;\r\n  value?: string;\r\n  onCreated?: (editor: IDomEditor) => void;\r\n  onChange?: (htmlStr: string, textStr: string, editor: IDomEditor) => void;\r\n  onBlur?: () => void;\r\n  onFocus?: () => void;\r\n  editorStyle?: CSSProperties;\r\n  toolbarKeys?: string[];\r\n  maxLength?: number;\r\n  toolbarConfig?: Partial<IToolbarConfig>;\r\n  editorConfig?: Partial<IEditorConfig> /** 请保持内容不可变，在创建富文本前设置的才生效 */;\r\n  toolbarProps?: CommonObj;\r\n  editorProps?: CommonObj;\r\n  showImgTips?: boolean; //是否显示图片提示（类型、大小限制提示）\r\n  wordsList?: {\r\n    wrong: string[]; //错别字列表\r\n    sens: string[]; //敏感词列表\r\n  };\r\n  wordsStyle?: {\r\n    wrong?: CSSProperties;\r\n    sens?: CSSProperties;\r\n  };\r\n  insertMenu?: () => void;\r\n}\r\n\r\nlet oldHtmlVal = \"\"; //编辑器的旧值，用于判断是否值是否发生了更改，处理wangEditor 失去或聚焦焦点时，会触发onChange的bug\r\nlet isFocus = false; //是否聚焦\r\nconst emptyValue = \"\"; //编辑器的空值。默认是 '<p><br/></p>'， 可根据实际情况设置为 ''\r\n//敏感词关键词默认样式\r\nconst defaultWordsStyle = {\r\n  wrong: { color: \"red\" },\r\n  sens: { color: \"darkorange\" },\r\n};\r\n//默认的toolBars\r\nconst defaultToolbarKeys: string[] = [\r\n  \"header1\",\r\n  \"bold\",\r\n  \"indent\",\r\n  \"delIndent\",\r\n  \"justifyLeft\",\r\n  \"justifyRight\",\r\n  \"justifyCenter\",\r\n  \"justifyJustify\",\r\n  \"bulletedList\",\r\n  \"numberedList\",\r\n  \"uploadImage\",\r\n  \"redo\",\r\n  \"undo\",\r\n  \"fullScreen\",\r\n];\r\n//默认的toolBar工具栏配置\r\nconst defaultToolbarConfig: Partial<IToolbarConfig> = {\r\n  // toolbarKeys: defaultToolbarKeys,\r\n  // noUseDefaultbarConfig: false, //不使用默认的toolbarKeys\r\n  // excludeKeys: [],\r\n  // modalAppendToBody: false,\r\n  // insertKeys: {\r\n  //   index: 0, // 插入的位置，基于当前的 toolbarKeys\r\n  //   keys: ['tag-1', 'tag-2', 'html-view'],\r\n  // },\r\n};\r\n//默认的editor编辑栏配置\r\nconst defaultEditorConfig: Partial<IEditorConfig> = {\r\n  // maxLength: 99999,\r\n  placeholder: \"请输入内容\",\r\n  autoFocus: false,\r\n  // onBlur() {},\r\n  MENU_CONF: {\r\n    uploadImage: {},\r\n  },\r\n  // 若调用浏览器自带的粘贴逻辑，请用  customPaste: ()=>true， 覆盖此操作\r\n  customPaste(editor: IDomEditor, event: ClipboardEvent): boolean {\r\n    // 可参考 https://developer.mozilla.org/zh-CN/docs/Web/API/ClipboardEvent\r\n    // const html = event?.clipboardData?.getData('text/html'); // 获取粘贴的 html\r\n    const { clipboardData } = event || {};\r\n    const text: string = clipboardData?.getData(\"text/plain\") || \"\"; // 获取粘贴的纯文本\r\n    try {\r\n      const fragmentNode = editor.getFragment();\r\n      // table 粘贴单独处理\r\n      if (\r\n        Array.isArray(fragmentNode) &&\r\n        fragmentNode.some((item: CommonObj) => item.type === \"table\")\r\n      ) {\r\n        editor.insertText(text);\r\n        event.preventDefault();\r\n        return false;\r\n      }\r\n      const textArray = text.split(\"\\r\");\r\n      const formatedText = textArray\r\n        .map(\r\n          (item) => `<div>${(item || \"\").replace(/([]|\\r|\\n)/g, \"\")}</div>`\r\n        )\r\n        .join(\"\");\r\n      // 新版本应该已修复 https://github.com/wangeditor-team/wangEditor/commit/8b549f480434782107eda3412bf6530d0d7eb9ba\r\n      editor.dangerouslyInsertHtml(formatedText);\r\n    } catch (error) {\r\n      editor.insertText(text.replace(/([]|\\r)/g, \"\"));\r\n    }\r\n    // 阻止默认的粘贴行为\r\n    event.preventDefault();\r\n    return false;\r\n  },\r\n};\r\n\r\n//如果只注册一个菜单，没有别的功能了，则推荐使用 registerMenu\r\n// Boot.registerMenu(tagOne);\r\n// 如果除了菜单之外还要同时注册其他能力，则建议使用 registerModule\r\n\r\nexport default ({\r\n  className = \"\",\r\n  value = \"\",\r\n  onCreated,\r\n  onChange,\r\n  onBlur,\r\n  onFocus,\r\n  editorStyle = { height: \"300px\" },\r\n  toolbarKeys = defaultToolbarKeys,\r\n  maxLength,\r\n  toolbarConfig = {},\r\n  editorConfig = {},\r\n  toolbarProps = {},\r\n  editorProps = {},\r\n  showImgTips = false,\r\n  wordsList,\r\n  wordsStyle,\r\n  insertMenu,\r\n}: Props) => {\r\n  const [htmlValue, setHtmlValue] = useState(\"\");\r\n  const isCtrlZ = useRef(false);\r\n  const [editor, setEditor] = useState<IDomEditor | null>(null); // editor 实例\r\n  const { wrong: wrongStyle, sens: sensStyle } = merge(\r\n    {},\r\n    defaultWordsStyle,\r\n    wordsStyle\r\n  );\r\n  const uploadImageCfg = getUploadImageConfig(); //上传图片的配置\r\n  const imgTypesStr = uploadImageCfg?.allowedFileTypes\r\n    .map((it: string) => it.split(\"/\")[1])\r\n    .join(\"、\");\r\n  const imgMaxSize = toFileSizeStr(uploadImageCfg?.maxFileSize);\r\n  //工具栏配置 因为toolbarKeys配置使用频繁，所以单独预留一个属性直接配置它\r\n  const toolbarDefaultConfig: Partial<IToolbarConfig> = merge(\r\n    {},\r\n    defaultToolbarConfig,\r\n    toolbarConfig,\r\n    { toolbarKeys }\r\n  );\r\n  // 编辑器配置\r\n  const editorDefaultConfig: Partial<IEditorConfig> = merge(\r\n    {},\r\n    defaultEditorConfig,\r\n    {\r\n      onBlur() {\r\n        isFocus = false;\r\n        // setTimeout(() => {\r\n        onBlur?.();\r\n        // }, 50);\r\n      },\r\n      onFocus() {\r\n        isFocus = true;\r\n        // setTimeout(() => {\r\n        onFocus?.();\r\n        // }, 50);\r\n      },\r\n      MENU_CONF: { uploadImage: uploadImageCfg },\r\n    },\r\n    editorConfig,\r\n    { maxLength }\r\n  );\r\n  useEffect(() => {\r\n    insertMenu?.();\r\n  }, []);\r\n  useEffect(() => {\r\n    return () => {\r\n      if (!editor) return;\r\n      editor.destroy();\r\n      setEditor(null);\r\n    };\r\n  }, [editor]);\r\n\r\n  // const memoValue = useMemo(() => {\r\n  //   if (!value) return emptyValue;\r\n  //   if (wordsList && !isFocus) {\r\n  //     const { wrong: wrongWords, sens: sensWords } = wordsList;\r\n  //     value = htmlToText(value);\r\n  //     value = textToHtmlWithWords(value, wrongWords, sensWords);\r\n  //   }\r\n  //   if (!value.startsWith('<p>')) value = '<p>' + value; //当传入html文本时，需要p标签包裹行内元素，否则编辑器会显示不正常\r\n  //   if (!value.endsWith('</p>')) value += '</p>';\r\n  //   return value;\r\n  // }, [value, wordsList]);\r\n  useEffect(() => {\r\n    if (!value) {\r\n      setHtmlValue(emptyValue);\r\n    } else {\r\n      if (wordsList && !isFocus) {\r\n        const { wrong: wrongWords, sens: sensWords } = wordsList;\r\n        value = htmlToText(value);\r\n        value = textToHtmlWithWords(\r\n          value,\r\n          wrongWords,\r\n          sensWords,\r\n          cssObjToCssStr(wrongStyle),\r\n          cssObjToCssStr(sensStyle)\r\n        );\r\n      }\r\n      if (!value.startsWith(\"<p>\")) value = \"<p>\" + value; //当传入html文本时，需要p标签包裹行内元素，否则编辑器会显示不正常\r\n      if (!value.endsWith(\"</p>\")) value += \"</p>\";\r\n      setHtmlValue(value);\r\n    }\r\n  }, [value, wordsList]);\r\n  //当编辑器刚创建时，可用于获取editor实例\r\n  function handleCreated(editor: IDomEditor) {\r\n    setEditor(editor);\r\n    onCreated?.(editor);\r\n  }\r\n\r\n  /**\r\n   * 编辑器onChang事件\r\n   */\r\n  const handleChange = debounce((editor: IDomEditor) => {\r\n    // * https://github.com/wangeditor-team/wangEditor/issues/4493\r\n    //  * 频繁执行会触发问题，setHtml 异步更新（像 Vue 和 React），用 setTimeout 隔离\r\n    const _html = getIsEmpty(editor) ? emptyValue : editor.getHtml();\r\n    //wangEditor 在失去或聚焦焦点时，均会触发 onChange事件，故做此处理用于区分\r\n    const isChange = oldHtmlVal !== _html;\r\n    if (isChange) {\r\n      const _text = editor.getText();\r\n      oldHtmlVal = _html;\r\n      // editor.setHtml(_html);\r\n      if (isCtrlZ.current) {\r\n        setTimeout(() => {\r\n          console.log(\"onChange--------------------Z\");\r\n          onChange?.(_html, _text, editor);\r\n        }, 50);\r\n      } else {\r\n        console.log(\"onChange--------------------\");\r\n        onChange?.(_html, _text, editor);\r\n      }\r\n    }\r\n  }, 500);\r\n  // 监听ctrl-z键盘事件\r\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\r\n    isCtrlZ.current = (event.ctrlKey || event.metaKey) && event.key === \"z\";\r\n  }, []);\r\n  useEventListener(\"keydown\", handleKeyDown);\r\n  return (\r\n    <>\r\n      <div className={`${className} ${s[\"base-editor\"]}`}>\r\n        {!!toolbarDefaultConfig.toolbarKeys?.length && (\r\n          <Toolbar\r\n            mode=\"default\"\r\n            style={{ borderBottom: \"1px solid #ccc\" }}\r\n            editor={editor}\r\n            defaultConfig={toolbarDefaultConfig}\r\n            {...toolbarProps}\r\n          />\r\n        )}\r\n        <Editor\r\n          mode=\"simple\"\r\n          style={editorStyle}\r\n          value={htmlValue}\r\n          onCreated={handleCreated}\r\n          onChange={handleChange}\r\n          defaultConfig={editorDefaultConfig}\r\n          {...editorProps}\r\n        />\r\n      </div>\r\n      {showImgTips &&\r\n        toolbarDefaultConfig?.toolbarKeys?.includes(\"uploadImage\") && (\r\n          <div className={s.tips}>\r\n            注：{imgTypesStr === \"*\" ? \"\" : `图片只能上传${imgTypesStr}格式，`}\r\n            每张图片大小不能超过{imgMaxSize}。\r\n          </div>\r\n        )}\r\n      {!!wordsList && (\r\n        <div className=\"f-sb-c mt-8\">\r\n          <div className=\"f-1\">\r\n            <span>疑似敏感词：</span>\r\n            <span style={sensStyle}>{wordsList?.sens?.join(\"、\")}</span>\r\n          </div>\r\n          <div className=\"f-1\">\r\n            <span>疑似错别字：</span>\r\n            <span style={wrongStyle}>{wordsList?.wrong?.join(\"、\")}</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * 测试3\r\n */\r\n\r\nimport BaseEditor from \"@/components/BaseEditor\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  tagOne,\r\n  tagTwo,\r\n  htmlView,\r\n  copyHtml,\r\n  copyText,\r\n} from \"@/components/BaseEditor/menu\";\r\nimport { Boot, IModuleConf } from \"@wangeditor/editor\";\r\n\r\ninterface Props {\r\n  className?: string;\r\n}\r\n\r\nexport default ({ className = \"\" }: Props) => {\r\n  const [sensWords, setSensWords] = useState<string[]>([]);\r\n  const [wrongWords, setWrongWords] = useState<string[]>([]);\r\n  const [value, setValue] = useState(\"\");\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n  function getData() {\r\n    setTimeout(() => {\r\n      setSensWords([\"祖国\", \"田野\"]);\r\n      setWrongWords([\"假象\", \"上\"]);\r\n      setValue(\"我们的假象，在希望的田野上，热爱我们的祖国！\");\r\n    }, 500);\r\n  }\r\n  function handleBlur() {\r\n    setTimeout(() => {\r\n      setSensWords([\"祖\"]);\r\n      setWrongWords([\"假\"]);\r\n    }, 500);\r\n  }\r\n  function insertMenu() {\r\n    const module: Partial<IModuleConf> = {\r\n      menus: [tagOne, tagTwo, htmlView, copyHtml, copyText],\r\n    };\r\n    Boot.registerModule(module);\r\n  }\r\n  return (\r\n    <>\r\n      <BaseEditor\r\n        // toolbarConfig={{\r\n        //   insertKeys: {\r\n        //     index: 0, // 插入的位置，基于当前的 toolbarKeys\r\n        //     keys: [\"html-view\", \"tag-1\", \"tag-2\", \"copy-text\"],\r\n        //   },\r\n        // }}\r\n        // insertMenu={insertMenu}\r\n        value={value}\r\n        onBlur={handleBlur}\r\n        onChange={setValue}\r\n        wordsList={{ wrong: wrongWords, sens: sensWords }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n"],"names":["toFileSizeStr","size","getIsEmpty","editor","getUploadImageConfig","maxSize","res","insertFn","showMessage","data","code","msg","file","textToHtmlWithWords","str","wrongWords","sensWords","wrongStyle","sensStyle","reg","matchStr","chars","index","htmlToText","htmlStr","el","cssObjToCssStr","cssProps","key","val","ind","oldHtmlVal","isFocus","emptyValue","defaultWordsStyle","defaultToolbarKeys","defaultToolbarConfig","defaultEditorConfig","event","clipboardData","text","fragmentNode","item","formatedText","BaseEditor","className","value","onCreated","onChange","onBlur","onFocus","editorStyle","toolbarKeys","maxLength","toolbarConfig","editorConfig","toolbarProps","editorProps","showImgTips","wordsList","wordsStyle","insertMenu","htmlValue","setHtmlValue","useState","isCtrlZ","useRef","setEditor","merge","uploadImageCfg","imgTypesStr","it","imgMaxSize","toolbarDefaultConfig","editorDefaultConfig","useEffect","handleCreated","handleChange","debounce","_html","_text","handleKeyDown","useCallback","useEventListener","jsxs","Fragment","s","_a","jsx","Toolbar","Editor","_b","setSensWords","setWrongWords","setValue","getData","handleBlur"],"mappings":"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"}